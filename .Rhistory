quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count)
)
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = .99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(pack_sum, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, ("sex", "class"))
separate(res, sex_class, sex, class))
separate(res, sex_class, sex, class)
separate(res, sex_class, into=("sex", "class"))
separate(res, sex_class, c("sex", "class"))
submit()
students3
?gather
submit()
submit()
?spread
submit()
library(readr)
parse_number("class5")
submit()
?parse_number
submit()
submit()
submit()
?mutate
submit()
submit()
submit()
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
bind_rows(passed, failed)
sat
?contains
?separate
submit()
submit()
submit()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks = 100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pm25 ~ region, col="red")
boxplot(pm25~region, col="red")
boxplot(pm25~region, data=polution, col="red")
boxplot(pm25~region, data=pollution, col="red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution == "east")
east <- subset(pollution, region == "east")
head(east)
hist(pm25(east, col="green"))
hist(pm25(east$pm25, col="green"))
hist(east$pm25, col="green")
hist(west$pm25, col="green")
hist(subset(pm25, region=="west", col="green")
)
hist(subset(pollution), region=="west", col="green")
hist(subset(pollution, region=="west"), col="green")
hist(subset(pollution$pm25, region=="west"), col = "green")
hist(subset(pollution, region="west")$pm25, col="green")
hist(subset(pollution, region=="west")$pm25, col="green")
with(pollution, plot)
with(pollution, plot(latitude,pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
library(data.table)
library(dplyr)
## Download, unzip, and read file
url <-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(url, "household_data.zip")
unzip("household_data.zip")
homeData <- fread("household_power_consumption.txt", header=TRUE,
na.strings="?")
## Subset to the dates of interest; format date/time properly
home_dt <- subset(homeData, Date=="1/2/2007" | Date=="2/2/2007")
home_dt$Date <- sub("/2/", "/02/", home_dt$Date)
home_dt$Date <- paste(home_dt$Date, home_dt$Time)
home_dt$Date <- as.POSIXct(home_dt$Date, format="%d/%m/%Y %H:%M:%S")
## Create plot and save as png file
plot(home_dt$Date,home_dt$Sub_metering_1,
ylab="Energy sub metering", xlab="", type="l")
lines(home_dt$Date, home_dt$Sub_metering_2, xlab="", ylab="Energy sub metering",
type = "l", col="red")
lines(home_dt$Date, home_dt$Sub_metering_3, type = "l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lwd=c(2.5,2.5,2.5), lty=1, col=c("black", "red", "blue"))
swirl()
library(swirl)
swirl()
?Devices
with(faithful, plot(erruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income | region, data=state, layout=c(4,1))
xyplot(Life.Exp~Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qpot(displ, hwy, date=mpg)
qplot(displ, hwy, date=mpg)
qplot(displ, hwy, data =mpg)
head(airquality)
range(airquality$ozone, na.rm = TRUE)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb), col="blue", col.lab="red"")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb), col="blue", col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb), col="blue", col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)", col="blue", col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col="blue", col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
title(main="Ozone and wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par)
length(par())
names(par())
par()$pin
par("fg")
?pch
par("pch")
par("lty")
plot(airquality$wind, airquality$Ozone, type="n")
plot(airquality$Wind, airquality$Ozone, type="n")
title(main="Wind and Ozone in NYC")
may <- subset(airquality, airquality$Month==5)
may <- subset(airquality, Month==5)
points(Wind, Ozone, col="blue", pch=17)
with(airquality, points(Wind, Ozone, col="blue", pch=17))
points(may$Wind, may$Ozone, col="blue", pch=17))
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay<-subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col="red", pch="8")
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", c(pch, col, legend), c((17,8),("blue","red"), ("May",)))
legend("topright", c(pch, col, legend), c((17,8),("blue","red"), ("May","Other Months")))
legend("topright", c(pch, col, legend), c((17,8),("blue","red"), ("May","Other Months")))
legend("topright" c(pch, col, legend), c((17,8),("blue","red"), ("May","Other Months")))
legend("topright", pch = c(17,8), col= ("blue","red"), legend=("May","Other Months"))
legend("topright", pch = c(17,8), col= c("blue","red"), legend=c("May","Other Months"))
abline(median(airquality$Wind),lty=2, lwd=2)
abline(v=median(airquality$Wind)),lty=2, lwd=2)
?abline
?median
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(c(1,2))
par(c(1,2), type="n")
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1),oma= c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(datasets)
data(airquality)
str(airquality)
airquality <- transform(airquality, Month=factor(Month))
qplot(Wind, Ozone, data=airquality, facets=.~month.abb)
library(ggplot2)
qplot(Wind, Ozone, data=airquality, facets=.~month.abb)
qplot(Wind, Ozone, data=airquality, facets=.~Month)
qplot(Wind, Ozone, data=airquality, facets=.~Month, na.rm=TRUE)
+geom_smooth
+geom_smooth(method="lm")
qplot(Wind, Ozone, data=airquality, facets=.~Month, na.rm=TRUE) + geom_smooth()
qplot(Wind, Ozone, data=airquality, facets=.~Month, na.rm=TRUE) + geom_smooth(method="lm")
swirl()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind, data=airquality)
xyplot(Ozone~Wind, data=airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data=airquality)
xyplot(Ozone~Wind | as.factor(Month), data=airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month, data=airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind, data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat|color*cut, data=diamonds, strip=FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat|color*cut, data=diamonds, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
library(swirl)
swirl()
sample(colors,10)
sample(colors(), 10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
0
exit
q
?rgb
p3<-colorRampPalette(c("blue","green", alpha=.5))
p3<-colorRampPalette(c("blue","green"), alpha=.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5, .3))
cols<-brewer.pal(3, "BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg, color=drv)
qplot(displ,hwy,data=mpg, color=drv, geom=c("point","smooth"))
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv, hwy,data=mpg,geom="boxplot")
qplot(drv, hwy,data=mpg,geom="boxplot", color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets = .~drv)
qplot(hwy,data=mpg,facets = drv~.,binwidth=2)
qplot(displ,hwy,data=mpg,geom=c("point","smooth", facets=.~drv))
qplot(displ,hwy,data=mpg,geom=c("point","smooth"), facets=.~drv)
g<-ggplot(mpg,aes=c(displ,hwy))
g<-ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4, alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(color=drv)+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(color=drv)+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv),size=2,alpha=1/2)+geom_smooth(size=4,lty=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv),size=2,alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
plot(myx,myy,type="1",ylim = c(-3,3))
plot(myx,myy,type="l",ylim = c(-3,3))
g<-ggplot(testdat,aes(myx,myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+face_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2, color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2, color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
setwd("C:\\Users\\Mo\\Desktop\\Coursera_ReproducibleResearch\\RepData_PeerAssessment1")
library(dplyr)
activity_data <- unzip("activity.zip", files="activity.csv")
activity_data <- read.csv(activity_data)
activity_data$date <- as.Date(activity_data$date, "%Y-%m-%d")
nas <- filter(activity_data, is.na(activity_data$steps))
na_days <- (unique(nas$date))
without_nas <- filter(activity_data, steps!="NA")
by_day <- group_by(without_nas, date)
steps_by_day <- summarise(by_day, total=sum(steps))
total_steps <- steps_by_day$total
hist(total_steps, xlab="steps per day", main="Range and frequency of steps per day")
mean(total_steps)
median(total_steps)
per_interval <- group_by(without_nas, interval)
steps_per_interval <- summarise(per_interval, avg_steps=mean(steps))
with(steps_per_interval, plot(interval, avg_steps, type="l", xlab="time of day from midnight to 24:00", ylab="average number of steps", main="Average steps by time of day"))
ordered <- arrange(steps_per_interval, desc(avg_steps))
most_active_interval <- ordered[1,1]
View(ordered)
most_active_interval
View(nas$steps)
View(nas)
View(steps_per_interval)
?find
for(i in steps_per_interval){print iconv()}
for(i in steps_per_interval){print i}
for(i in steps_per_interval){print(i)}
for(i in steps_per_interval$interval){print(i)}
?where
for(i in steps_per_interval$interval){print(steps_per_interval$avg_steps)}
tester <- table(steps_per_interval$interval,steps_per_interval$avg_steps)
View(tester)
tester_interval <- steps_per_interval$interval
tester_avg_steps <- steps_per_interval$avg_steps
for(i in tester_interval){print(tester_avg_steps[i])}
tester_avg_steps
for(i in seq_along(tester_interval)){print(tester_avg_steps[i])}
View(activity_data)
activity_no_nas <- activity_data
nas2 <- filter(activity_no_nas, is.na(activity_no_nas$steps))
interval_vector <- steps_per_interval$interval
steps_vector <- steps_per_interval$steps
for(i in nas2$interval)
{x <- which(interval_vector==i)
y <- steps_vector[x]
activity_no_nas[x,"steps"]<-y}
activity_data <- unzip("activity.zip", files="activity.csv")
activity_data <- read.csv(activity_data)
activity_data$date <- as.Date(activity_data$date, "%Y-%m-%d")
activity_no_nas <- activity_data
nas2 <- filter(activity_no_nas, is.na(activity_no_nas$steps))
interval_vector <- steps_per_interval$interval
steps_vector <- steps_per_interval$steps
for(i in nas2$interval)
{x <- which(interval_vector==i)
y <- steps_vector[x]
activity_no_nas[x,"steps"]<-y}
View(activity_no_nas)
View(steps_per_interval)
activity_no_nas <- activity_data
nas2 <- filter(activity_no_nas, is.na(activity_no_nas$steps))
interval_vector <- steps_per_interval$interval
steps_vector <- steps_per_interval$avg_steps
for(i in nas2$interval)
{x <- which(interval_vector==i)
y <- steps_vector[x]
activity_no_nas[x,"steps"]<-y}
View(activity_no_nas)
View(steps_per_interval)
by_day_no_nas <- group_by(activity_no_nas, date)
daily_steps_no_nas <- summarise(by_day_no_nas, total=sum(steps))
total_steps_no_nas <- daily_steps_no_nas$total
hist(total_steps_no_nas, xlab="steps per day", main="Range and frequency of steps per day", main="Steps per day with missing data accounted for")
hist(total_steps_no_nas, xlab="steps per day", main="Steps per day with missing data accounted for")
hist(total_steps, xlab="steps per day", main="Range and frequency of steps per day")
?(weekdays)
?weekdays
activity_no_nas <- mutate(activity_no_nas, weekdys = weekdays(date))
View(activity_no_nas)
for(i in activity_no_nas$weekdys){
if(i=="Saturday" | i=="Sunday"){
i<-"weekend"
}
else{i<-"weekday"}
}
View(activity_no_nas)
for(i in activity_no_nas$weekdys){
if(i=="Saturday" | i=="Sunday"){
i="weekend"
}
else{i="weekday"}
}
View(activity_no_nas)
?set
?set()
for(i in activity_no_nas$weekdys){
if(i=="Saturday" | i=="Sunday"){
activity_no_nas$weekdys[i]<-"weekend"
}
else{activity_no_nas$weekdys[i]<-"weekday"}
}
View(activity_no_nas)
activity_no_nas <- mutate(activity_no_nas, weekdys = weekdays(date))
for(i in activity_no_nas$weekdys){
if(i=="Saturday" | i=="Sunday"){
activity_no_nas$weekdys[i]="weekend"
}
else{activity_no_nas$weekdys[i]="weekday"}
}
?transform
?ifelse
?overwrite
?transform
activity_no_nas <- mutate(activity_no_nas, weekdys = weekdays(date))
for(i in activity_no_nas$weekdys){
ifelse(i == "Saturday" | i== "Sunday", "weekend", "weekday")}
View(activity_no_nas)
newx <-for(i in activity_no_nas$weekdys){
ifelse(i == "Saturday" | i== "Sunday", "weekend", "weekday")}
View(newx)
?within
activity_no_nas <- mutate(activity_no_nas, weekdys = weekdays(date))
for(i in activity_no_nas$weekdys){
if(i=="Saturday" | i=="Sunday"){
activity_no_nas$weekdy[i]="weekend"
}
else{activity_no_nas$weekdy[i]="weekday"}
}
activity_no_nas <- mutate(activity_no_nas, weekdys = weekdays(date))
activity_no_nas[, "weekdys"] <- ifelse(activity_no_nas[, "weekdys"]=="Saturday", "weekend","weekday")
View(activity_no_nas)
activity_no_nas <- mutate(activity_no_nas, weekdys = weekdays(date))
activity_no_nas[, "weekdys"] <- ifelse(activity_no_nas[, "weekdys"]=="Saturday" | activity_no_nas[, "weekdys"]=="Sunday", "weekend","weekday")
sum(activity_no_nas$weekdys=="Saturday")
activity_no_nas <- mutate(activity_no_nas, weekdys = weekdays(date))
sum(activity_no_nas$weekdys=="Saturday")
sum(activity_no_nas$weekdys=="Sunday")
activity_no_nas[, "weekdys"] <- ifelse(activity_no_nas[, "weekdys"]=="Saturday" | activity_no_nas[, "weekdys"]=="Sunday", "weekend","weekday")
sum(activity_no_nas$weekdys=="weekend")
activity_no_nas_by_weekdy <- summarise(group_by(activity_no_nas, weekdys), mean(steps))
View(activity_no_nas_by_weekdy)
activity_no_nas <- mutate(activity_no_nas, weekdys = weekdays(date))
activity_no_nas[, "weekdys"] <- ifelse(activity_no_nas[, "weekdys"]=="Saturday" | activity_no_nas[, "weekdys"]=="Sunday", "weekend","weekday")
activity_no_nas_by_weekdy <- group_by(activity_no_nas, weekdys)
activity_no_nas_by_weekdy <- summarise(activity_no_nas_by_weekdy, avg=mean(steps))
View(activity_no_nas_by_weekdy)
